{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "7033964631087142035"
    }
  },
  "parameters": {
    "groupName": {
      "type": "string",
      "defaultValue": "clusterless-hpc"
    },
    "location": {
      "type": "string",
      "defaultValue": "southcentralus"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[parameters('groupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "user_identity",
      "resourceGroup": "[parameters('groupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-identity', parameters('groupName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "1191652642347697038"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[take(format('{0}-{1}', resourceGroup().name, uniqueString(resourceGroup().id)), 24)]",
              "metadata": {
                "description": "Resource Name."
              },
              "maxLength": 24,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "User Managed Identity Location."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags."
              }
            },
            "enableDeleteLock": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable lock to prevent accidental deletion"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[replace(format('{0}', parameters('name')), '-', '')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[parameters('enableDeleteLock')]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', replace(format('{0}', parameters('name')), '-', ''))]",
              "name": "[format('{0}-lock', replace(format('{0}', parameters('name')), '-', ''))]",
              "properties": {
                "level": "CanNotDelete"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(format('{0}', parameters('name')), '-', ''))]"
              ]
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(format('{0}', parameters('name')), '-', ''))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(format('{0}', parameters('name')), '-', ''))).principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('groupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "azure_storage",
      "resourceGroup": "[parameters('groupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('groupName')), 'Microsoft.Resources/deployments', 'user_identity'), '2020-10-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "17187103965361515740"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[take(format('{0}-{1}', resourceGroup().name, uniqueString(resourceGroup().id)), 24)]",
              "metadata": {
                "description": "Resource Name."
              },
              "maxLength": 24,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Resource Location."
              }
            },
            "enableDeleteLock": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable lock to prevent accidental deletion"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags."
              }
            },
            "type": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "allowedValues": [
                "Premium_LRS",
                "Standard_LRS"
              ],
              "metadata": {
                "description": "Specifies the storage account type."
              }
            },
            "principalId": {
              "type": "string",
              "defaultValue": "null",
              "metadata": {
                "description": "Principal Id to Assign ACR Pull Role."
              }
            },
            "builtInRoleType": {
              "type": "string",
              "defaultValue": "Contributor",
              "metadata": {
                "description": "Built-in role to assign"
              },
              "allowedValues": [
                "Owner",
                "Contributor",
                "Reader"
              ]
            },
            "privateLinkSettings": {
              "type": "object",
              "defaultValue": {
                "subnetId": null,
                "vnetId": null
              },
              "metadata": {
                "description": "Settings Required to Enable Private Link"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": "storagePrivateEndpoint",
              "metadata": {
                "description": "Specifies the name of the private link to the Azure Container Registry."
              }
            }
          },
          "variables": {
            "role": {
              "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
              "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
              "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]"
            },
            "enablePrivateLink": "[and(not(equals(parameters('privateLinkSettings').vnetId, 'null')), not(equals(parameters('privateLinkSettings').subnetId, 'null')))]",
            "publicDNSZoneForwarder": "[format('blob.{0}', environment().suffixes.storage)]",
            "privateDnsZoneName": "[format('privatelink.{0}', variables('publicDNSZoneForwarder'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[replace(format('{0}', parameters('name')), '-', '')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('type')]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "networkAcls": "[if(variables('enablePrivateLink'), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny'), createObject())]"
              }
            },
            {
              "condition": "[parameters('enableDeleteLock')]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', replace(format('{0}', parameters('name')), '-', ''))]",
              "name": "[format('{0}-lock', replace(format('{0}', parameters('name')), '-', ''))]",
              "properties": {
                "level": "CanNotDelete"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', replace(format('{0}', parameters('name')), '-', ''))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', replace(format('{0}', parameters('name')), '-', ''))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', replace(format('{0}', parameters('name')), '-', '')), parameters('name'))]",
              "properties": {
                "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]",
                "principalId": "[parameters('principalId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', replace(format('{0}', parameters('name')), '-', ''))]"
              ]
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').subnetId, null())), not(equals(parameters('privateLinkSettings').vnetId, null())))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateDnsZoneName')]",
              "location": "global",
              "properties": {}
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').subnetId, null())), not(equals(parameters('privateLinkSettings').vnetId, null())))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-07-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', replace(format('{0}', parameters('name')), '-', ''))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('privateLinkSettings').subnetId]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', replace(format('{0}', parameters('name')), '-', ''))]"
              ]
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').vnetId, null())), not(equals(parameters('privateLinkSettings').subnetId, null())))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/dnsgroupname', parameters('privateEndpointName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "dnsConfig",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').vnetId, null())), not(equals(parameters('privateLinkSettings').subnetId, null())))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateDnsZoneName'), 'link_to_vnet')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('privateLinkSettings').vnetId]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('groupName')), 'Microsoft.Resources/deployments', 'user_identity')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('groupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "azure_batch",
      "resourceGroup": "[parameters('groupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1124.51302",
              "templateHash": "18068796083927506668"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[take(format('{0}-{1}', resourceGroup().name, uniqueString(resourceGroup().id)), 24)]",
              "metadata": {
                "description": "Resource Name."
              },
              "maxLength": 24,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Resource Location."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of log analytics."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "ServiceLog"
              ],
              "allowedValues": [
                "ServiceLog"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Batch/batchAccounts",
              "apiVersion": "2020-09-01",
              "name": "[replace(format('{0}', parameters('name')), '-', '')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Batch/batchAccounts/{0}', replace(format('{0}', parameters('name')), '-', ''))]",
              "name": "[format('{0}-{1}-lock', replace(format('{0}', parameters('name')), '-', ''), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Batch/batchAccounts', replace(format('{0}', parameters('name')), '-', ''))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Batch/batchAccounts/{0}', replace(format('{0}', parameters('name')), '-', ''))]",
              "name": "[format('{0}-diagnosticSettings', replace(format('{0}', parameters('name')), '-', ''))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Batch/batchAccounts', replace(format('{0}', parameters('name')), '-', ''))]"
              ]
            }
          ],
          "outputs": {
            "batchAccountName": {
              "type": "string",
              "value": "[replace(format('{0}', parameters('name')), '-', '')]",
              "metadata": {
                "description": "The name of the batch account"
              }
            },
            "batchAccountResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Batch/batchAccounts', replace(format('{0}', parameters('name')), '-', ''))]",
              "metadata": {
                "description": "The resource ID of the batch account"
              }
            },
            "batchAccountResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the batch account was deployed into"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('groupName')), 'Microsoft.Resources/deployments', 'user_identity')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('groupName'))]"
      ]
    }
  ]
}