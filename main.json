{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.613.9944",
      "templateHash": "9713967746151708906"
    }
  },
  "parameters": {
    "prefix": {
      "type": "string",
      "defaultValue": "iac"
    },
    "groupName": {
      "type": "string",
      "defaultValue": "[format('{0}-bicep', parameters('prefix'))]"
    },
    "location": {
      "type": "string",
      "defaultValue": "centralus"
    }
  },
  "functions": [],
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[parameters('groupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "azure_storage",
      "resourceGroup": "[parameters('groupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.613.9944",
              "templateHash": "15220960631018384223"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[format('{0}-{1}', resourceGroup().name, uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Resource Name."
              },
              "maxLength": 24,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Resource Location."
              }
            },
            "enableDeleteLock": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable lock to prevent accidental deletion"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags."
              }
            },
            "type": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "allowedValues": [
                "Premium_LRS",
                "Standard_LRS"
              ],
              "metadata": {
                "description": "Specifies the storage account type."
              }
            },
            "principalId": {
              "type": "string",
              "defaultValue": "null",
              "metadata": {
                "description": "Principal Id to Assign ACR Pull Role."
              }
            },
            "builtInRoleType": {
              "type": "string",
              "defaultValue": "Contributor",
              "metadata": {
                "description": "Built-in role to assign"
              },
              "allowedValues": [
                "Owner",
                "Contributor",
                "Reader"
              ]
            },
            "privateLinkSettings": {
              "type": "object",
              "defaultValue": {
                "subnetId": null,
                "vnetId": null
              },
              "metadata": {
                "description": "Settings Required to Enable Private Link"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "defaultValue": "storagePrivateEndpoint",
              "metadata": {
                "description": "Specifies the name of the private link to the Azure Container Registry."
              }
            }
          },
          "functions": [],
          "variables": {
            "role": {
              "Owner": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635', subscription().subscriptionId)]",
              "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]",
              "Reader": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7', subscription().subscriptionId)]"
            },
            "enablePrivateLink": "[and(not(equals(parameters('privateLinkSettings').vnetId, 'null')), not(equals(parameters('privateLinkSettings').subnetId, 'null')))]",
            "publicDNSZoneForwarder": "[format('blob.{0}', environment().suffixes.storage)]",
            "privateDnsZoneName": "[format('privatelink.{0}', variables('publicDNSZoneForwarder'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[replace(parameters('name'), '-', '')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('type')]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "networkAcls": "[if(variables('enablePrivateLink'), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny'), createObject())]"
              }
            },
            {
              "condition": "[parameters('enableDeleteLock')]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', replace(parameters('name'), '-', ''))]",
              "name": "[format('{0}-lock', replace(parameters('name'), '-', ''))]",
              "properties": {
                "level": "CanNotDelete"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', replace(parameters('name'), '-', ''))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', replace(parameters('name'), '-', ''))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', replace(parameters('name'), '-', '')), parameters('name'))]",
              "properties": {
                "roleDefinitionId": "[variables('role')[parameters('builtInRoleType')]]",
                "principalId": "[parameters('principalId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', replace(parameters('name'), '-', ''))]"
              ]
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').subnetId, null())), not(equals(parameters('privateLinkSettings').vnetId, null())))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('privateDnsZoneName')]",
              "location": "global",
              "properties": {}
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').subnetId, null())), not(equals(parameters('privateLinkSettings').vnetId, null())))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-07-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', replace(parameters('name'), '-', ''))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('privateLinkSettings').subnetId]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', replace(parameters('name'), '-', ''))]"
              ]
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').vnetId, null())), not(equals(parameters('privateLinkSettings').subnetId, null())))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/dnsgroupname', parameters('privateEndpointName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "dnsConfig",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            },
            {
              "condition": "[and(not(equals(parameters('privateLinkSettings').vnetId, null())), not(equals(parameters('privateLinkSettings').subnetId, null())))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('privateDnsZoneName'), 'link_to_vnet')]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('privateLinkSettings').vnetId]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('groupName'))]"
      ]
    }
  ]
}